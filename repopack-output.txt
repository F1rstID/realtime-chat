This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repopack on: 2024-11-23T13:50:58.760Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
application/
  usecase/
    auth_usecase.go
    chat_usecase.go
    message_usecase.go
common/
  response.go
config/
  config.go
docs/
  docs.go
  swagger.json
  swagger.yaml
domain/
  models/
    chat_group.go
    chat.go
    message.go
    user.go
  repositories/
    chat_repository.go
    message_repository.go
    user_repository.go
  services/
    auth_service.go
    chat_service.go
infrastructure/
  sqlite/
    initialize.go
interfaces/
  controllers/
    auth_controller.go
    chat_controller.go
    message_controller.go
  middlewares/
    auth_middleware.go
  repositories/
    chat_repository.go
    message_repository.go
    user_repository.go
  routers/
    router.go
  errors.go
  response.go
.gitignore
go.mod
go.sum
main.go
README.md

================================================================
Repository Files
================================================================

================
File: application/usecase/auth_usecase.go
================
// application/usecase/auth_usecase.go

package usecase

import (
	"errors"
	"strings"
	"time"

	"github.com/f1rstid/realtime-chat/domain/models"
	"github.com/f1rstid/realtime-chat/domain/repositories"
	"github.com/f1rstid/realtime-chat/domain/services"
)

// RegisterInput defines the input data for registration
type RegisterInput struct {
	Email    string `json:"email" validate:"required,email"`
	Nickname string `json:"nickname" validate:"required,min=2,max=20"`
	Password string `json:"password" validate:"required,min=8"`
}

// LoginInput defines the input data for login
type LoginInput struct {
	Email    string `json:"email" validate:"required,email"`
	Password string `json:"password" validate:"required"`
}

// AuthResponse defines the response data for authentication operations
type AuthResponse struct {
	Token string      `json:"token"`
	User  interface{} `json:"user"`
}

type AuthUsecase struct {
	userRepo    repositories.UserRepository
	authService services.AuthService
}

func NewAuthUsecase(userRepo repositories.UserRepository, authService services.AuthService) *AuthUsecase {
	return &AuthUsecase{
		userRepo:    userRepo,
		authService: authService,
	}
}

func (au *AuthUsecase) Register(input RegisterInput) (*AuthResponse, error) {
	// Clean input
	input.Email = strings.TrimSpace(strings.ToLower(input.Email))
	input.Nickname = strings.TrimSpace(input.Nickname)

	// Create user model
	user := &models.User{
		Email:     input.Email,
		Nickname:  input.Nickname,
		Password:  input.Password,
		CreatedAt: time.Now(),
	}

	// Check if email exists
	existingUser, err := au.userRepo.FindByEmail(input.Email)
	if err == nil && existingUser != nil {
		return nil, errors.New("email already exists")
	}

	// Check if nickname exists
	existingUser, err = au.userRepo.FindByNickname(input.Nickname)
	if err == nil && existingUser != nil {
		return nil, errors.New("nickname already exists")
	}

	// Hash password
	hashedPassword, err := au.authService.HashPassword(input.Password)
	if err != nil {
		return nil, err
	}
	user.Password = hashedPassword

	// Create user
	createdUser, err := au.userRepo.Create(user)
	if err != nil {
		return nil, err
	}

	// Generate token
	token, err := au.authService.GenerateToken(createdUser)
	if err != nil {
		return nil, err
	}

	return &AuthResponse{
		Token: token,
		User:  createdUser,
	}, nil
}

func (au *AuthUsecase) Login(input LoginInput) (*AuthResponse, error) {
	// Clean input
	input.Email = strings.TrimSpace(strings.ToLower(input.Email))

	// Find user by email
	user, err := au.userRepo.FindByEmail(input.Email)
	if err != nil {
		return nil, errors.New("invalid email or password")
	}

	// Check password
	err = au.authService.ComparePassword(user.Password, input.Password)
	if err != nil {
		return nil, errors.New("invalid email or password")
	}

	// Generate token
	token, err := au.authService.GenerateToken(user)
	if err != nil {
		return nil, err
	}

	return &AuthResponse{
		Token: token,
		User:  user,
	}, nil
}

================
File: application/usecase/chat_usecase.go
================
package usecase

import (
	"errors"
	"github.com/f1rstid/realtime-chat/domain/models"
	"github.com/f1rstid/realtime-chat/domain/repositories"
)

type ChatUsecase struct {
	chatRepo    repositories.ChatRepository
	messageRepo repositories.MessageRepository
	userRepo    repositories.UserRepository
}

func NewChatUsecase(
	chatRepo repositories.ChatRepository,
	messageRepo repositories.MessageRepository,
	userRepo repositories.UserRepository,
) *ChatUsecase {
	return &ChatUsecase{
		chatRepo:    chatRepo,
		messageRepo: messageRepo,
		userRepo:    userRepo,
	}
}

// CreatePrivateChat creates a 1:1 chat between two users
func (cu *ChatUsecase) CreatePrivateChat(user1ID, user2ID int) (*models.Chat, error) {
	// Verify both users exist
	user1, err := cu.userRepo.FindByID(user1ID)
	if err != nil {
		return nil, errors.New("user1 not found")
	}

	user2, err := cu.userRepo.FindByID(user2ID)
	if err != nil {
		return nil, errors.New("user2 not found")
	}

	chat := &models.Chat{
		Name: user1.Nickname + "-" + user2.Nickname,
	}

	if err := cu.chatRepo.Create(chat); err != nil {
		return nil, err
	}

	if err := cu.chatRepo.AddUserToChat(chat.ID, user1ID); err != nil {
		cu.chatRepo.Delete(chat.ID)
		return nil, errors.New("failed to add user1 to chat")
	}

	if err := cu.chatRepo.AddUserToChat(chat.ID, user2ID); err != nil {
		cu.chatRepo.Delete(chat.ID)
		return nil, errors.New("failed to add user2 to chat")
	}
	return chat, nil
}

func (cu *ChatUsecase) CreateGroupChat(name string, userIDs []int) (*models.Chat, error) {
	// Verify all users exist
	for _, userID := range userIDs {
		_, err := cu.userRepo.FindByID(userID)
		if err != nil {
			return nil, errors.New("user not found: " + string(userID))
		}
	}

	chat := &models.Chat{
		Name: name,
	}

	if err := cu.chatRepo.Create(chat); err != nil {
		return nil, err
	}

	// Add users to the chat group
	for _, userID := range userIDs {
		if err := cu.chatRepo.AddUserToChat(chat.ID, userID); err != nil {
			// If there's an error, we might want to clean up the created chat
			cu.chatRepo.Delete(chat.ID)
			return nil, errors.New("failed to add user to chat group")
		}
	}

	return chat, nil
}

// GetUserChats returns all chats for a user
func (cu *ChatUsecase) GetUserChats(userID int) ([]models.Chat, error) {
	// Implementation here
	return nil, nil
}

================
File: application/usecase/message_usecase.go
================
package usecase

import (
	"errors"
	"log"
	"time"

	"github.com/f1rstid/realtime-chat/domain/models"
	"github.com/f1rstid/realtime-chat/domain/repositories"
)

type MessageUsecase struct {
	messageRepo repositories.MessageRepository
	chatRepo    repositories.ChatRepository
}

func NewMessageUsecase(
	messageRepo repositories.MessageRepository,
	chatRepo repositories.ChatRepository,
) *MessageUsecase {
	return &MessageUsecase{
		messageRepo: messageRepo,
		chatRepo:    chatRepo,
	}
}

// SendMessage sends a new message in a chat
func (mu *MessageUsecase) SendMessage(chatID, senderID int, content string) (*models.Message, error) {
	// Verify chat exists
	chat, err := mu.chatRepo.FindById(chatID)

	if err != nil {
		return nil, errors.New("chat not found")
	}

	message := &models.Message{
		ChatId:    chat.ID,
		SenderId:  senderID,
		Content:   content,
		CreatedAt: time.Now(),
		UpdatedAt: time.Now(),
	}

	if err := mu.messageRepo.Create(message); err != nil {
		log.Println(err)
		return nil, err
	}

	return message, nil
}

// UpdateMessage updates an existing message
func (mu *MessageUsecase) UpdateMessage(messageID, userID int, newContent string) (*models.Message, error) {
	message, err := mu.messageRepo.FindById(messageID)
	if err != nil {
		return nil, errors.New("message not found")
	}

	if message.SenderId != userID {
		return nil, errors.New("unauthorized to update this message")
	}

	message.Content = newContent
	message.UpdatedAt = time.Now()

	if err := mu.messageRepo.Update(message); err != nil {
		return nil, err
	}

	return message, nil
}

// DeleteMessage deletes an existing message
func (mu *MessageUsecase) DeleteMessage(messageID, userID int) error {
	message, err := mu.messageRepo.FindById(messageID)
	if err != nil {
		return errors.New("message not found")
	}

	if message.SenderId != userID {
		return errors.New("unauthorized to delete this message")
	}

	return mu.messageRepo.Delete(messageID)
}

================
File: common/response.go
================
// common/response.go
package common

// Response codes
const (
	// Success codes (2xxx)
	StatusSuccess = 2000
	StatusCreated = 2001

	// Client errors (4xxx)
	StatusInvalidRequest  = 4000
	StatusUnauthorized    = 4001
	StatusForbidden       = 4002
	StatusNotFound        = 4003
	StatusEmailExists     = 4004
	StatusNicknameExists  = 4005
	StatusInvalidAuth     = 4006
	StatusChatNotFound    = 4007
	StatusMessageNotFound = 4008
	StatusUnauthorizedMsg = 4009

	// Server errors (5xxx)
	StatusInternalError = 5000
	StatusDatabaseError = 5001
)

// BaseResponse 기본 응답 구조
type BaseResponse struct {
	Success bool        `json:"success" example:"true"`
	Code    int         `json:"code" example:"2000"`
	Data    interface{} `json:"data"`
}

// ErrorResponse 에러 응답 예시용 구조체
type ErrorResponse struct {
	Success bool   `json:"success" example:"false"`
	Code    int    `json:"code" example:"4000"`
	Data    string `json:"data" example:"잘못된 요청입니다"`
}

// AuthData represents authentication data
type AuthData struct {
	Token string   `json:"token" example:"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."`
	User  UserData `json:"user"`
}

// UserData represents user information
type UserData struct {
	ID        int    `json:"id" example:"1"`
	Email     string `json:"email" example:"user@example.com"`
	Nickname  string `json:"nickname" example:"홍길동"`
	CreatedAt string `json:"createdAt" example:"2024-03-23T12:00:00Z"`
}

// ChatData represents chat information
type ChatData struct {
	ID        int    `json:"id" example:"1"`
	Name      string `json:"name" example:"개발팀 채팅방"`
	CreatedAt string `json:"createdAt" example:"2024-03-23T12:00:00Z"`
}

// MessageData represents message information
type MessageData struct {
	ID        int    `json:"id" example:"1"`
	ChatID    int    `json:"chatId" example:"1"`
	SenderID  int    `json:"senderId" example:"1"`
	Content   string `json:"content" example:"안녕하세요"`
	CreatedAt string `json:"createdAt" example:"2024-03-23T12:00:00Z"`
	UpdatedAt string `json:"updatedAt" example:"2024-03-23T12:00:00Z"`
}

// Predefined responses

var (
	// ErrInvalidRequest 잘못된 요청
	InvalidRequest = ErrorResponse{
		Success: false,
		Code:    StatusInvalidRequest,
		Data:    "잘못된 요청입니다",
	}

	// ErrUnauthorized 인증 필요
	Unauthorized = ErrorResponse{
		Success: false,
		Code:    StatusUnauthorized,
		Data:    "인증이 필요합니다",
	}

	// ErrInvalidAuth 인증 실패
	InvalidAuth = ErrorResponse{
		Success: false,
		Code:    StatusInvalidAuth,
		Data:    "이메일 또는 비밀번호가 올바르지 않습니다",
	}

	// ErrEmailExists 이미 존재하는 이메일
	EmailExists = ErrorResponse{
		Success: false,
		Code:    StatusEmailExists,
		Data:    "이미 사용중인 이메일입니다",
	}

	// ErrNicknameExists 이미 존재하는 닉네임
	NicknameExists = ErrorResponse{
		Success: false,
		Code:    StatusNicknameExists,
		Data:    "이미 사용중인 닉네임입니다",
	}

	// ErrChatNotFound 채팅방을 찾을 수 없음
	ChatNotFound = ErrorResponse{
		Success: false,
		Code:    StatusChatNotFound,
		Data:    "채팅방을 찾을 수 없습니다",
	}

	// ErrMessageNotFound 메시지를 찾을 수 없음
	MessageNotFound = ErrorResponse{
		Success: false,
		Code:    StatusMessageNotFound,
		Data:    "메시지를 찾을 수 없습니다",
	}

	// ErrUnauthorizedMessage 메시지에 대한 권한 없음
	UnauthorizedMessage = ErrorResponse{
		Success: false,
		Code:    StatusUnauthorizedMsg,
		Data:    "메시지에 대한 권한이 없습니다",
	}

	// ErrInternalServer 내부 서버 오류
	InternalServer = ErrorResponse{
		Success: false,
		Code:    StatusInternalError,
		Data:    "내부 서버 오류가 발생했습니다",
	}

	// ErrDatabase 데이터베이스 오류
	DatabaseError = ErrorResponse{
		Success: false,
		Code:    StatusDatabaseError,
		Data:    "데이터베이스 오류가 발생했습니다",
	}
)

type ErrInvalidRequest struct {
	Success bool   `json:"success" example:"false"`
	Code    int    `json:"code" example:"4000"`
	Data    string `json:"data" example:"잘못된 요청입니다"`
}

type ErrUnauthorized struct {
	Success bool   `json:"success" example:"false"`
	Code    int    `json:"code" example:"4001"`
	Data    string `json:"data" example:"인증이 필요합니다"`
}

type ErrInvalidAuth struct {
	Success bool   `json:"success" example:"false"`
	Code    int    `json:"code" example:"4006"`
	Data    string `json:"data" example:"이메일 또는 비밀번호가 올바르지 않습니다"`
}

type ErrEmailExists struct {
	Success bool   `json:"success" example:"false"`
	Code    int    `json:"code" example:"4004"`
	Data    string `json:"data" example:"이미 사용중인 이메일입니다"`
}

type ErrNicknameExists struct {
	Success bool   `json:"success" example:"false"`
	Code    int    `json:"code" example:"4005"`
	Data    string `json:"data" example:"이미 사용중인 닉네임입니다"`
}

type ErrChatNotFound struct {
	Success bool   `json:"success" example:"false"`
	Code    int    `json:"code" example:"4007"`
	Data    string `json:"data" example:"채팅방을 찾을 수 없습니다"`
}

type ErrMessageNotFound struct {
	Success bool   `json:"success" example:"false"`
	Code    int    `json:"code" example:"4008"`
	Data    string `json:"data" example:"메시지를 찾을 수 없습니다"`
}

type ErrUnauthorizedMessage struct {
	Success bool   `json:"success" example:"false"`
	Code    int    `json:"code" example:"4009"`
	Data    string `json:"data" example:"메시지에 대한 권한이 없습니다"`
}

type ErrInternalServer struct {
	Success bool   `json:"success" example:"false"`
	Code    int    `json:"code" example:"5000"`
	Data    string `json:"data" example:"내부 서버 오류가 발생했습니다"`
}

type ErrDatabase struct {
	Success bool   `json:"success" example:"false"`
	Code    int    `json:"code" example:"5001"`
	Data    string `json:"data" example:"데이터베이스 오류가 발생했습니다"`
}

// Success response example
type RegisterResponse struct {
	Success bool     `json:"success" example:"true"`
	Code    int      `json:"code" example:"2001"`
	Data    AuthData `json:"data"`
}

type LoginResponse struct {
	Success bool     `json:"success" example:"true"`
	Code    int      `json:"code" example:"2000"`
	Data    AuthData `json:"data"`
}

type ChatResponse struct {
	Success bool     `json:"success" example:"true"`
	Code    int      `json:"code" example:"2000"`
	Data    ChatData `json:"data"`
}

type MessageResponse struct {
	Success bool        `json:"success" example:"true"`
	Code    int         `json:"code" example:"2000"`
	Data    MessageData `json:"data"`
}

type CreateChatRequest struct {
	Name    string `json:"name" example:"Team Chat" validate:"required"`
	UserIDs []int  `json:"user_ids" example:"[1,2,3]" validate:"required"`
}

================
File: config/config.go
================
package config

import (
	"github.com/joho/godotenv"
	"log"
	"os"
)

type DatabaseConfig struct {
	DSN string
}

type Config struct {
	ServerURL  string
	ServerPort string
	Database   DatabaseConfig
	JWTSecret  string
}

func LoadConfig() (*Config, error) {
	if err := godotenv.Load(); err != nil {
		log.Println("failed to load .env file")
	}
	return &Config{
		ServerURL:  getEnv("SERVER_URL", "localhost"),
		ServerPort: getEnv("SERVER_PORT", "5000"),
		Database: DatabaseConfig{
			DSN: getEnv("DATABASE_DSN", "sqlite.db"),
		},
		JWTSecret: getEnv("JWT_SECRET", "test"),
	}, nil
}

func getEnv(key, defaultValue string) string {
	if value, exists := os.LookupEnv(key); exists {
		return value
	}
	return defaultValue
}

================
File: docs/docs.go
================
// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/auth/login": {
            "post": {
                "description": "이메일과 비밀번호로 로그인하고 인증 토큰을 반환합니다",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "사용자 로그인",
                "parameters": [
                    {
                        "description": "로그인 정보",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/common.LoginResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/common.ErrInvalidRequest"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/common.ErrInvalidAuth"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/common.ErrInternalServer"
                        }
                    }
                }
            }
        },
        "/auth/register": {
            "post": {
                "description": "새로운 사용자를 등록하고 인증 토큰을 반환합니다",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "사용자 등록",
                "parameters": [
                    {
                        "description": "등록 정보",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.RegisterRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/common.RegisterResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/common.ErrInvalidRequest"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/common.ErrNicknameExists"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/common.ErrInternalServer"
                        }
                    }
                }
            }
        },
        "/chats/group": {
            "post": {
                "description": "그룹 채팅방을 생성합니다",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Chat"
                ],
                "summary": "그룹 채팅 생성",
                "parameters": [
                    {
                        "description": "채팅방 생성 정보",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.CreateGroupChatRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/common.ChatResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/common.ErrInvalidRequest"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/common.ErrInternalServer"
                        }
                    }
                }
            }
        },
        "/chats/private/{user1_id}/{user2_id}": {
            "post": {
                "description": "두 사용자 간의 1:1 채팅을 생성합니다",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Chat"
                ],
                "summary": "1:1 채팅 생성",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "사용자1 ID",
                        "name": "user1_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "사용자2 ID",
                        "name": "user2_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/common.ChatResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/common.ErrInvalidRequest"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/common.ErrInternalServer"
                        }
                    }
                }
            }
        },
        "/messages": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "채팅방에 새로운 메시지를 전송합니다",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Message"
                ],
                "summary": "메시지 전송",
                "parameters": [
                    {
                        "description": "메시지 정보",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.SendMessageRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/common.MessageResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/common.ErrInvalidRequest"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/common.ErrInternalServer"
                        }
                    }
                }
            }
        },
        "/messages/{id}": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "기존 메시지의 내용을 수정합니다",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Message"
                ],
                "summary": "메시지 수정",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "메시지 ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "수정할 메시지 내용",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.UpdateMessageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/common.MessageResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/common.ErrInvalidRequest"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/common.ErrUnauthorizedMessage"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/common.ErrInternalServer"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "메시지를 삭제합니다",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Message"
                ],
                "summary": "메시지 삭제",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "메시지 ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/common.MessageResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/common.ErrInvalidRequest"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/common.ErrUnauthorizedMessage"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/common.ErrInternalServer"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "common.AuthData": {
            "type": "object",
            "properties": {
                "token": {
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                },
                "user": {
                    "$ref": "#/definitions/common.UserData"
                }
            }
        },
        "common.ChatData": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "example": "2024-03-23T12:00:00Z"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "name": {
                    "type": "string",
                    "example": "개발팀 채팅방"
                }
            }
        },
        "common.ChatResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 2000
                },
                "data": {
                    "$ref": "#/definitions/common.ChatData"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "common.ErrEmailExists": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 4004
                },
                "data": {
                    "type": "string",
                    "example": "이미 사용중인 이메일입니다"
                },
                "success": {
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "common.ErrInternalServer": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 5000
                },
                "data": {
                    "type": "string",
                    "example": "내부 서버 오류가 발생했습니다"
                },
                "success": {
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "common.ErrInvalidAuth": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 4006
                },
                "data": {
                    "type": "string",
                    "example": "이메일 또는 비밀번호가 올바르지 않습니다"
                },
                "success": {
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "common.ErrInvalidRequest": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 4000
                },
                "data": {
                    "type": "string",
                    "example": "잘못된 요청입니다"
                },
                "success": {
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "common.ErrNicknameExists": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 4005
                },
                "data": {
                    "type": "string",
                    "example": "이미 사용중인 닉네임입니다"
                },
                "success": {
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "common.ErrUnauthorizedMessage": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 4009
                },
                "data": {
                    "type": "string",
                    "example": "메시지에 대한 권한이 없습니다"
                },
                "success": {
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "common.LoginResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 2000
                },
                "data": {
                    "$ref": "#/definitions/common.AuthData"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "common.MessageData": {
            "type": "object",
            "properties": {
                "chatId": {
                    "type": "integer",
                    "example": 1
                },
                "content": {
                    "type": "string",
                    "example": "안녕하세요"
                },
                "createdAt": {
                    "type": "string",
                    "example": "2024-03-23T12:00:00Z"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "senderId": {
                    "type": "integer",
                    "example": 1
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2024-03-23T12:00:00Z"
                }
            }
        },
        "common.MessageResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 2000
                },
                "data": {
                    "$ref": "#/definitions/common.MessageData"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "common.RegisterResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 2001
                },
                "data": {
                    "$ref": "#/definitions/common.AuthData"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "common.UserData": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "example": "2024-03-23T12:00:00Z"
                },
                "email": {
                    "type": "string",
                    "example": "user@example.com"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "nickname": {
                    "type": "string",
                    "example": "홍길동"
                }
            }
        },
        "controllers.CreateGroupChatRequest": {
            "type": "object"
        },
        "controllers.LoginRequest": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "user@example.com"
                },
                "password": {
                    "type": "string",
                    "example": "password123"
                }
            }
        },
        "controllers.RegisterRequest": {
            "type": "object",
            "required": [
                "email",
                "nickname",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "user@example.com"
                },
                "nickname": {
                    "type": "string",
                    "maxLength": 20,
                    "minLength": 2,
                    "example": "홍길동"
                },
                "password": {
                    "type": "string",
                    "minLength": 8,
                    "example": "password123"
                }
            }
        },
        "controllers.SendMessageRequest": {
            "type": "object",
            "required": [
                "chatId",
                "content"
            ],
            "properties": {
                "chatId": {
                    "type": "integer",
                    "example": 1
                },
                "content": {
                    "type": "string",
                    "example": "Hello, how are you?"
                }
            }
        },
        "controllers.UpdateMessageRequest": {
            "type": "object",
            "required": [
                "content"
            ],
            "properties": {
                "content": {
                    "type": "string",
                    "example": "Updated message content"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "description": "JWT 토큰을 입력하세요. 예: Bearer {token}",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:5050",
	BasePath:         "/api",
	Schemes:          []string{},
	Title:            "Realtime Chat API",
	Description:      "실시간 채팅을 위한 RESTful API 서버입니다.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}

================
File: docs/swagger.json
================
{
    "swagger": "2.0",
    "info": {
        "description": "실시간 채팅을 위한 RESTful API 서버입니다.",
        "title": "Realtime Chat API",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "1.0"
    },
    "host": "localhost:5050",
    "basePath": "/api",
    "paths": {
        "/auth/login": {
            "post": {
                "description": "이메일과 비밀번호로 로그인하고 인증 토큰을 반환합니다",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "사용자 로그인",
                "parameters": [
                    {
                        "description": "로그인 정보",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/common.LoginResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/common.ErrInvalidRequest"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/common.ErrInvalidAuth"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/common.ErrInternalServer"
                        }
                    }
                }
            }
        },
        "/auth/register": {
            "post": {
                "description": "새로운 사용자를 등록하고 인증 토큰을 반환합니다",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "사용자 등록",
                "parameters": [
                    {
                        "description": "등록 정보",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.RegisterRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/common.RegisterResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/common.ErrInvalidRequest"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/common.ErrNicknameExists"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/common.ErrInternalServer"
                        }
                    }
                }
            }
        },
        "/chats/group": {
            "post": {
                "description": "그룹 채팅방을 생성합니다",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Chat"
                ],
                "summary": "그룹 채팅 생성",
                "parameters": [
                    {
                        "description": "채팅방 생성 정보",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.CreateGroupChatRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/common.ChatResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/common.ErrInvalidRequest"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/common.ErrInternalServer"
                        }
                    }
                }
            }
        },
        "/chats/private/{user1_id}/{user2_id}": {
            "post": {
                "description": "두 사용자 간의 1:1 채팅을 생성합니다",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Chat"
                ],
                "summary": "1:1 채팅 생성",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "사용자1 ID",
                        "name": "user1_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "사용자2 ID",
                        "name": "user2_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/common.ChatResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/common.ErrInvalidRequest"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/common.ErrInternalServer"
                        }
                    }
                }
            }
        },
        "/messages": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "채팅방에 새로운 메시지를 전송합니다",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Message"
                ],
                "summary": "메시지 전송",
                "parameters": [
                    {
                        "description": "메시지 정보",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.SendMessageRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/common.MessageResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/common.ErrInvalidRequest"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/common.ErrInternalServer"
                        }
                    }
                }
            }
        },
        "/messages/{id}": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "기존 메시지의 내용을 수정합니다",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Message"
                ],
                "summary": "메시지 수정",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "메시지 ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "수정할 메시지 내용",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.UpdateMessageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/common.MessageResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/common.ErrInvalidRequest"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/common.ErrUnauthorizedMessage"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/common.ErrInternalServer"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "메시지를 삭제합니다",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Message"
                ],
                "summary": "메시지 삭제",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "메시지 ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/common.MessageResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/common.ErrInvalidRequest"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/common.ErrUnauthorizedMessage"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/common.ErrInternalServer"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "common.AuthData": {
            "type": "object",
            "properties": {
                "token": {
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                },
                "user": {
                    "$ref": "#/definitions/common.UserData"
                }
            }
        },
        "common.ChatData": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "example": "2024-03-23T12:00:00Z"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "name": {
                    "type": "string",
                    "example": "개발팀 채팅방"
                }
            }
        },
        "common.ChatResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 2000
                },
                "data": {
                    "$ref": "#/definitions/common.ChatData"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "common.ErrEmailExists": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 4004
                },
                "data": {
                    "type": "string",
                    "example": "이미 사용중인 이메일입니다"
                },
                "success": {
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "common.ErrInternalServer": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 5000
                },
                "data": {
                    "type": "string",
                    "example": "내부 서버 오류가 발생했습니다"
                },
                "success": {
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "common.ErrInvalidAuth": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 4006
                },
                "data": {
                    "type": "string",
                    "example": "이메일 또는 비밀번호가 올바르지 않습니다"
                },
                "success": {
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "common.ErrInvalidRequest": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 4000
                },
                "data": {
                    "type": "string",
                    "example": "잘못된 요청입니다"
                },
                "success": {
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "common.ErrNicknameExists": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 4005
                },
                "data": {
                    "type": "string",
                    "example": "이미 사용중인 닉네임입니다"
                },
                "success": {
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "common.ErrUnauthorizedMessage": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 4009
                },
                "data": {
                    "type": "string",
                    "example": "메시지에 대한 권한이 없습니다"
                },
                "success": {
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "common.LoginResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 2000
                },
                "data": {
                    "$ref": "#/definitions/common.AuthData"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "common.MessageData": {
            "type": "object",
            "properties": {
                "chatId": {
                    "type": "integer",
                    "example": 1
                },
                "content": {
                    "type": "string",
                    "example": "안녕하세요"
                },
                "createdAt": {
                    "type": "string",
                    "example": "2024-03-23T12:00:00Z"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "senderId": {
                    "type": "integer",
                    "example": 1
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2024-03-23T12:00:00Z"
                }
            }
        },
        "common.MessageResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 2000
                },
                "data": {
                    "$ref": "#/definitions/common.MessageData"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "common.RegisterResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 2001
                },
                "data": {
                    "$ref": "#/definitions/common.AuthData"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "common.UserData": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "example": "2024-03-23T12:00:00Z"
                },
                "email": {
                    "type": "string",
                    "example": "user@example.com"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "nickname": {
                    "type": "string",
                    "example": "홍길동"
                }
            }
        },
        "controllers.CreateGroupChatRequest": {
            "type": "object"
        },
        "controllers.LoginRequest": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "user@example.com"
                },
                "password": {
                    "type": "string",
                    "example": "password123"
                }
            }
        },
        "controllers.RegisterRequest": {
            "type": "object",
            "required": [
                "email",
                "nickname",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "user@example.com"
                },
                "nickname": {
                    "type": "string",
                    "maxLength": 20,
                    "minLength": 2,
                    "example": "홍길동"
                },
                "password": {
                    "type": "string",
                    "minLength": 8,
                    "example": "password123"
                }
            }
        },
        "controllers.SendMessageRequest": {
            "type": "object",
            "required": [
                "chatId",
                "content"
            ],
            "properties": {
                "chatId": {
                    "type": "integer",
                    "example": 1
                },
                "content": {
                    "type": "string",
                    "example": "Hello, how are you?"
                }
            }
        },
        "controllers.UpdateMessageRequest": {
            "type": "object",
            "required": [
                "content"
            ],
            "properties": {
                "content": {
                    "type": "string",
                    "example": "Updated message content"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "description": "JWT 토큰을 입력하세요. 예: Bearer {token}",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}

================
File: docs/swagger.yaml
================
basePath: /api
definitions:
  common.AuthData:
    properties:
      token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
      user:
        $ref: '#/definitions/common.UserData'
    type: object
  common.ChatData:
    properties:
      createdAt:
        example: "2024-03-23T12:00:00Z"
        type: string
      id:
        example: 1
        type: integer
      name:
        example: 개발팀 채팅방
        type: string
    type: object
  common.ChatResponse:
    properties:
      code:
        example: 2000
        type: integer
      data:
        $ref: '#/definitions/common.ChatData'
      success:
        example: true
        type: boolean
    type: object
  common.ErrEmailExists:
    properties:
      code:
        example: 4004
        type: integer
      data:
        example: 이미 사용중인 이메일입니다
        type: string
      success:
        example: false
        type: boolean
    type: object
  common.ErrInternalServer:
    properties:
      code:
        example: 5000
        type: integer
      data:
        example: 내부 서버 오류가 발생했습니다
        type: string
      success:
        example: false
        type: boolean
    type: object
  common.ErrInvalidAuth:
    properties:
      code:
        example: 4006
        type: integer
      data:
        example: 이메일 또는 비밀번호가 올바르지 않습니다
        type: string
      success:
        example: false
        type: boolean
    type: object
  common.ErrInvalidRequest:
    properties:
      code:
        example: 4000
        type: integer
      data:
        example: 잘못된 요청입니다
        type: string
      success:
        example: false
        type: boolean
    type: object
  common.ErrNicknameExists:
    properties:
      code:
        example: 4005
        type: integer
      data:
        example: 이미 사용중인 닉네임입니다
        type: string
      success:
        example: false
        type: boolean
    type: object
  common.ErrUnauthorizedMessage:
    properties:
      code:
        example: 4009
        type: integer
      data:
        example: 메시지에 대한 권한이 없습니다
        type: string
      success:
        example: false
        type: boolean
    type: object
  common.LoginResponse:
    properties:
      code:
        example: 2000
        type: integer
      data:
        $ref: '#/definitions/common.AuthData'
      success:
        example: true
        type: boolean
    type: object
  common.MessageData:
    properties:
      chatId:
        example: 1
        type: integer
      content:
        example: 안녕하세요
        type: string
      createdAt:
        example: "2024-03-23T12:00:00Z"
        type: string
      id:
        example: 1
        type: integer
      senderId:
        example: 1
        type: integer
      updatedAt:
        example: "2024-03-23T12:00:00Z"
        type: string
    type: object
  common.MessageResponse:
    properties:
      code:
        example: 2000
        type: integer
      data:
        $ref: '#/definitions/common.MessageData'
      success:
        example: true
        type: boolean
    type: object
  common.RegisterResponse:
    properties:
      code:
        example: 2001
        type: integer
      data:
        $ref: '#/definitions/common.AuthData'
      success:
        example: true
        type: boolean
    type: object
  common.UserData:
    properties:
      createdAt:
        example: "2024-03-23T12:00:00Z"
        type: string
      email:
        example: user@example.com
        type: string
      id:
        example: 1
        type: integer
      nickname:
        example: 홍길동
        type: string
    type: object
  controllers.CreateGroupChatRequest:
    type: object
  controllers.LoginRequest:
    properties:
      email:
        example: user@example.com
        type: string
      password:
        example: password123
        type: string
    required:
    - email
    - password
    type: object
  controllers.RegisterRequest:
    properties:
      email:
        example: user@example.com
        type: string
      nickname:
        example: 홍길동
        maxLength: 20
        minLength: 2
        type: string
      password:
        example: password123
        minLength: 8
        type: string
    required:
    - email
    - nickname
    - password
    type: object
  controllers.SendMessageRequest:
    properties:
      chatId:
        example: 1
        type: integer
      content:
        example: Hello, how are you?
        type: string
    required:
    - chatId
    - content
    type: object
  controllers.UpdateMessageRequest:
    properties:
      content:
        example: Updated message content
        type: string
    required:
    - content
    type: object
host: localhost:5050
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: 실시간 채팅을 위한 RESTful API 서버입니다.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Realtime Chat API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: 이메일과 비밀번호로 로그인하고 인증 토큰을 반환합니다
      parameters:
      - description: 로그인 정보
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/controllers.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.LoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ErrInvalidRequest'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/common.ErrInvalidAuth'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.ErrInternalServer'
      summary: 사용자 로그인
      tags:
      - Auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: 새로운 사용자를 등록하고 인증 토큰을 반환합니다
      parameters:
      - description: 등록 정보
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/controllers.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/common.RegisterResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ErrInvalidRequest'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/common.ErrNicknameExists'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.ErrInternalServer'
      summary: 사용자 등록
      tags:
      - Auth
  /chats/group:
    post:
      consumes:
      - application/json
      description: 그룹 채팅방을 생성합니다
      parameters:
      - description: 채팅방 생성 정보
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/controllers.CreateGroupChatRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/common.ChatResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ErrInvalidRequest'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.ErrInternalServer'
      summary: 그룹 채팅 생성
      tags:
      - Chat
  /chats/private/{user1_id}/{user2_id}:
    post:
      consumes:
      - application/json
      description: 두 사용자 간의 1:1 채팅을 생성합니다
      parameters:
      - description: 사용자1 ID
        in: path
        name: user1_id
        required: true
        type: integer
      - description: 사용자2 ID
        in: path
        name: user2_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/common.ChatResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ErrInvalidRequest'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.ErrInternalServer'
      summary: 1:1 채팅 생성
      tags:
      - Chat
  /messages:
    post:
      consumes:
      - application/json
      description: 채팅방에 새로운 메시지를 전송합니다
      parameters:
      - description: 메시지 정보
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/controllers.SendMessageRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/common.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ErrInvalidRequest'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.ErrInternalServer'
      security:
      - BearerAuth: []
      summary: 메시지 전송
      tags:
      - Message
  /messages/{id}:
    delete:
      consumes:
      - application/json
      description: 메시지를 삭제합니다
      parameters:
      - description: 메시지 ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ErrInvalidRequest'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/common.ErrUnauthorizedMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.ErrInternalServer'
      security:
      - BearerAuth: []
      summary: 메시지 삭제
      tags:
      - Message
    put:
      consumes:
      - application/json
      description: 기존 메시지의 내용을 수정합니다
      parameters:
      - description: 메시지 ID
        in: path
        name: id
        required: true
        type: integer
      - description: 수정할 메시지 내용
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/controllers.UpdateMessageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ErrInvalidRequest'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/common.ErrUnauthorizedMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.ErrInternalServer'
      security:
      - BearerAuth: []
      summary: 메시지 수정
      tags:
      - Message
securityDefinitions:
  BearerAuth:
    description: 'JWT 토큰을 입력하세요. 예: Bearer {token}'
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"

================
File: domain/models/chat_group.go
================
package models

import "time"

type ChatGroup struct {
	Name      string    `json:"name" db:"name"`
	UserId    int       `json:"userId" db:"userId"`
	ChatId    int       `json:"chatId" db:"chatId"`
	CreatedAt time.Time `json:"createdAt" db:"createdAt"`

	Users []User `json:"users" gorm:"many2many:chat_group_users;"`
	Chats []Chat `json:"chats" gorm:"many2many:chat_group_chats;"`
}

================
File: domain/models/chat.go
================
package models

import "time"

type Chat struct {
	ID        int       `json:"id" db:"id"`
	Name      string    `json:"name" db:"name"`
	CreatedAt time.Time `json:"createdAt" db:"createdAt"`

	ChatGroups []ChatGroup `json:"chatGroups" gorm:"many2many:chat_group_chats;"`
	Messages   []Message   `json:"messages" gorm:"foreignKey:chatId;"`
}

================
File: domain/models/message.go
================
package models

import "time"

type Message struct {
	ID        int       `json:"id" db:"id"`
	ChatId    int       `json:"chatId" db:"chatId"`
	SenderId  int       `json:"senderId" db:"senderId"`
	Content   string    `json:"content" db:"content"`
	CreatedAt time.Time `json:"createdAt" db:"createdAt"`
	UpdatedAt time.Time `json:"updatedAt" db:"updatedAt"
`

	Chat   Chat `json:"chat" gorm:"foreignKey:chatId;"`
	Sender User `json:"sender" gorm:"foreignKey:senderId;"`
}

================
File: domain/models/user.go
================
package models

import (
	"errors"
	"regexp"
	"time"
)

type User struct {
	ID        int       `json:"id" db:"id"`
	Email     string    `json:"email" db:"email"`
	Nickname  string    `json:"nickname" db:"nickname"`
	Password  string    `json:"-" db:"password"` // "-" prevents password from being included in JSON
	CreatedAt time.Time `json:"createdAt" db:"createdAt"`
}

// Validate performs validation on user fields
func (u *User) Validate() error {
	// Email validation
	emailRegex := regexp.MustCompile(`^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$`)
	if !emailRegex.MatchString(u.Email) {
		return errors.New("invalid email format")
	}

	// Nickname validation
	if len(u.Nickname) < 2 || len(u.Nickname) > 20 {
		return errors.New("nickname must be between 2 and 20 characters")
	}
	nicknameRegex := regexp.MustCompile(`^[a-zA-Z0-9가-힣_.]+$`)
	if !nicknameRegex.MatchString(u.Nickname) {
		return errors.New("nickname can only contain letters, numbers and underscores")
	}

	// Password validation (performed before hashing)
	if len(u.Password) < 1 { // Corrected minimum password length
		return errors.New("password must be at least 8 characters")
	}

	return nil
}

================
File: domain/repositories/chat_repository.go
================
package repositories

import "github.com/f1rstid/realtime-chat/domain/models"

type ChatRepository interface {
	Create(chat *models.Chat) error
	FindById(id int) (*models.Chat, error)
	Update(chat *models.Chat) error
	Delete(id int) error

	AddUserToChat(chatID, userID int) error
	RemoveUserFromChat(chatID, userID int) error
	GetChatUsers(chatID int) ([]models.User, error)
	GetUserChats(userID int) ([]models.Chat, error)
}

================
File: domain/repositories/message_repository.go
================
package repositories

import "github.com/f1rstid/realtime-chat/domain/models"

type MessageRepository interface {
	Create(message *models.Message) error
	FindById(id int) (*models.Message, error)
	Update(message *models.Message) error
	Delete(id int) error
}

================
File: domain/repositories/user_repository.go
================
package repositories

import "github.com/f1rstid/realtime-chat/domain/models"

type UserRepository interface {
	Create(user *models.User) (*models.User, error)
	FindByID(id int) (*models.User, error)
	FindByEmail(email string) (*models.User, error)
	FindByNickname(nickname string) (*models.User, error)
	Update(user *models.User) error
	Delete(id int) error
}

================
File: domain/services/auth_service.go
================
package services

import (
	"errors"
	"time"

	"github.com/f1rstid/realtime-chat/domain/models"
	"github.com/golang-jwt/jwt/v4"
	"golang.org/x/crypto/bcrypt"
)

type TokenClaims struct {
	UserID   int    `json:"user_id"`
	Email    string `json:"email"`
	Nickname string `json:"nickname"`
	jwt.StandardClaims
}

type AuthService interface {
	HashPassword(password string) (string, error)
	ComparePassword(hashedPassword, password string) error
	GenerateToken(user *models.User) (string, error)
	ValidateToken(tokenString string) (*TokenClaims, error)
	RefreshToken(tokenString string) (string, error)
}

type authService struct {
	jwtSecret       string
	tokenExpiration time.Duration
	refreshDuration time.Duration
	passwordCost    int
}

func NewAuthService(jwtSecret string) AuthService {
	return &authService{
		jwtSecret:       jwtSecret,
		tokenExpiration: 24 * time.Hour, // Token expires in 24 hours
		refreshDuration: 72 * time.Hour, // Refresh token valid for 72 hours
		passwordCost:    12,             // Higher cost = more secure but slower
	}
}

func (a *authService) HashPassword(password string) (string, error) {
	if len(password) < 8 {
		return "", errors.New("password must be at least 8 characters")
	}

	hashedBytes, err := bcrypt.GenerateFromPassword([]byte(password), a.passwordCost)
	if err != nil {
		return "", errors.New("failed to hash password")
	}

	return string(hashedBytes), nil
}

func (a *authService) ComparePassword(hashedPassword, password string) error {
	return bcrypt.CompareHashAndPassword([]byte(hashedPassword), []byte(password))
}

func (a *authService) GenerateToken(user *models.User) (string, error) {
	claims := TokenClaims{
		UserID:   user.ID,
		Email:    user.Email,
		Nickname: user.Nickname,
		StandardClaims: jwt.StandardClaims{
			ExpiresAt: time.Now().Add(a.tokenExpiration).Unix(),
			IssuedAt:  time.Now().Unix(),
		},
	}

	token := jwt.NewWithClaims(jwt.SigningMethodHS256, claims)
	signedToken, err := token.SignedString([]byte(a.jwtSecret))
	if err != nil {
		return "", errors.New("failed to generate token")
	}

	return signedToken, nil
}

func (a *authService) ValidateToken(tokenString string) (*TokenClaims, error) {
	token, err := jwt.ParseWithClaims(tokenString, &TokenClaims{}, func(token *jwt.Token) (interface{}, error) {
		if _, ok := token.Method.(*jwt.SigningMethodHMAC); !ok {
			return nil, errors.New("unexpected signing method")
		}
		return []byte(a.jwtSecret), nil
	})

	if err != nil {
		return nil, err
	}

	if claims, ok := token.Claims.(*TokenClaims); ok && token.Valid {
		return claims, nil
	}

	return nil, errors.New("invalid token")
}

func (a *authService) RefreshToken(tokenString string) (string, error) {
	claims, err := a.ValidateToken(tokenString)
	if err != nil {
		return "", err
	}

	// Check if token is eligible for refresh
	if time.Unix(claims.ExpiresAt, 0).Sub(time.Now()) > -a.refreshDuration {
		// Create new token
		user := &models.User{
			ID:       claims.UserID,
			Email:    claims.Email,
			Nickname: claims.Nickname,
		}
		return a.GenerateToken(user)
	}

	return "", errors.New("refresh token expired")
}

================
File: domain/services/chat_service.go
================
package services

import (
	"encoding/json"
	"time"

	"github.com/f1rstid/realtime-chat/domain/models"
)

type ChatMessage struct {
	Type      string    `json:"type"`
	ChatID    int       `json:"chat_id"`
	SenderID  int       `json:"sender_id"`
	Content   string    `json:"content"`
	Timestamp time.Time `json:"timestamp"`
}

type ChatService struct {
	// You can add dependencies here if needed
}

func NewChatService() *ChatService {
	return &ChatService{}
}

// ParseMessage parses a raw message into a ChatMessage struct
func (cs *ChatService) ParseMessage(data []byte) (*ChatMessage, error) {
	var message ChatMessage
	if err := json.Unmarshal(data, &message); err != nil {
		return nil, err
	}
	return &message, nil
}

// FormatMessage formats a Message model into a ChatMessage
func (cs *ChatService) FormatMessage(message *models.Message) (*ChatMessage, error) {
	chatMessage := &ChatMessage{
		Type:      "message",
		ChatID:    message.ChatId,
		SenderID:  message.SenderId,
		Content:   message.Content,
		Timestamp: message.CreatedAt,
	}

	return chatMessage, nil
}

================
File: infrastructure/sqlite/initialize.go
================
package sqlite

import (
	"github.com/gofiber/websocket/v2"
	"log"
	"time"

	"github.com/jmoiron/sqlx"
	_ "github.com/mattn/go-sqlite3"
)

var DB *sqlx.DB

func InitDB(dataSource string) error {
	var err error
	DB, err = sqlx.Open("sqlite3", dataSource)
	if err != nil {
		return err
	}

	// Set connection pool settings
	DB.SetMaxOpenConns(25)
	DB.SetMaxIdleConns(25)
	DB.SetConnMaxLifetime(5 * time.Minute)

	err = DB.Ping()
	if err != nil {
		return err
	}

	return nil
}

func Migrate() error {
	sql := `
	-- Users table
	CREATE TABLE IF NOT EXISTS users (
		id INTEGER PRIMARY KEY AUTOINCREMENT,
		email TEXT NOT NULL UNIQUE,
		password TEXT NOT NULL,
		nickname TEXT NOT NULL UNIQUE,
		createdAt DATETIME DEFAULT CURRENT_TIMESTAMP
	);

	-- Chats table
	CREATE TABLE IF NOT EXISTS chats (
		id INTEGER PRIMARY KEY AUTOINCREMENT,
		name TEXT NOT NULL,
		createdAt DATETIME DEFAULT CURRENT_TIMESTAMP
	);

	-- Messages table
	CREATE TABLE IF NOT EXISTS messages (
		id INTEGER PRIMARY KEY AUTOINCREMENT,
		chatId INTEGER NOT NULL,
		senderId INTEGER NOT NULL,
		content TEXT NOT NULL,
		createdAt DATETIME NOT NULL,
		updatedAt DATETIME NOT NULL,
		FOREIGN KEY (chatId) REFERENCES chats(id) ON DELETE CASCADE,
		FOREIGN KEY (senderId) REFERENCES users(id) ON DELETE CASCADE
	);

	-- Chat groups table (for group chats)
	CREATE TABLE IF NOT EXISTS chat_groups (
		chatId INTEGER NOT NULL,
		userId INTEGER NOT NULL,
		createdAt DATETIME DEFAULT CURRENT_TIMESTAMP,
		PRIMARY KEY (chatId, userId),
		FOREIGN KEY (chatId) REFERENCES chats(id) ON DELETE CASCADE,
		FOREIGN KEY (userId) REFERENCES users(id) ON DELETE CASCADE
	);

	-- Create indexes
	CREATE INDEX IF NOT EXISTS idx_messages_chatId ON messages(chatId);
	CREATE INDEX IF NOT EXISTS idx_messages_senderId ON messages(senderId);
	CREATE INDEX IF NOT EXISTS idx_chat_groups_chatId ON chat_groups(chatId);
	CREATE INDEX IF NOT EXISTS idx_chat_groups_userId ON chat_groups(userId);
	`

	_, err := DB.Exec(sql)
	if err != nil {
		return err
	}

	log.Println("Database migration completed successfully")
	return nil
}

func CloseDB() {
	if err := DB.Close(); err != nil {
		log.Printf("Error closing database connection: %v", err)
	}
}

// WebSocket hub for managing connections and broadcasting messages
type Hub struct {
	// Registered clients
	clients map[*Client]bool

	// Register requests from clients
	register chan *Client

	// Unregister requests from clients
	unregister chan *Client

	// Broadcast messages to clients
	broadcast chan []byte
}

type Client struct {
	hub  *Hub
	conn *websocket.Conn
	send chan []byte
	// User ID associated with this connection
	userID int
}

func newHub() *Hub {
	return &Hub{
		broadcast:  make(chan []byte),
		register:   make(chan *Client),
		unregister: make(chan *Client),
		clients:    make(map[*Client]bool),
	}
}

func (h *Hub) run() {
	for {
		select {
		case client := <-h.register:
			h.clients[client] = true
		case client := <-h.unregister:
			if _, ok := h.clients[client]; ok {
				delete(h.clients, client)
				close(client.send)
			}
		case message := <-h.broadcast:
			for client := range h.clients {
				select {
				case client.send <- message:
				default:
					close(client.send)
					delete(h.clients, client)
				}
			}
		}
	}
}

================
File: interfaces/controllers/auth_controller.go
================
// interfaces/controllers/auth_controller.go
package controllers

import (
	"github.com/f1rstid/realtime-chat/application/usecase"
	"github.com/f1rstid/realtime-chat/common"
	"github.com/gofiber/fiber/v2"
)

// RegisterRequest represents the registration request payload
type RegisterRequest struct {
	Email    string `json:"email" example:"user@example.com" validate:"required,email"`
	Nickname string `json:"nickname" example:"홍길동" validate:"required,min=2,max=20"`
	Password string `json:"password" example:"password123" validate:"required,min=8"`
}

// LoginRequest represents the login request payload
type LoginRequest struct {
	Email    string `json:"email" example:"user@example.com" validate:"required,email"`
	Password string `json:"password" example:"password123" validate:"required"`
}

type AuthController struct {
	authUseCase *usecase.AuthUsecase
}

func NewAuthController(usecase *usecase.AuthUsecase) *AuthController {
	return &AuthController{
		authUseCase: usecase,
	}
}

// Register godoc
// @Summary      사용자 등록
// @Description  새로운 사용자를 등록하고 인증 토큰을 반환합니다
// @Tags         Auth
// @Accept       json
// @Produce      json
// @Param        request body RegisterRequest true "등록 정보"
// @Success      201  {object}  common.RegisterResponse
// @Failure      400  {object}  common.ErrInvalidRequest
// @Failure      409  {object}  common.ErrEmailExists
// @Failure      409  {object}  common.ErrNicknameExists
// @Failure      500  {object}  common.ErrInternalServer
// @Router       /auth/register [post]
func (ac *AuthController) Register(c *fiber.Ctx) error {
	var input RegisterRequest
	if err := c.BodyParser(&input); err != nil {
		return c.Status(fiber.StatusBadRequest).JSON(common.InvalidRequest)
	}

	if input.Email == "" || input.Password == "" || input.Nickname == "" {
		return c.Status(fiber.StatusBadRequest).JSON(common.InvalidRequest)
	}

	registerInput := usecase.RegisterInput{
		Email:    input.Email,
		Password: input.Password,
		Nickname: input.Nickname,
	}

	authResponse, err := ac.authUseCase.Register(registerInput)
	if err != nil {
		switch err.Error() {
		case "email already exists":
			return c.Status(fiber.StatusConflict).JSON(common.EmailExists)
		case "nickname already exists":
			return c.Status(fiber.StatusConflict).JSON(common.NicknameExists)
		default:
			return c.Status(fiber.StatusInternalServerError).JSON(common.InternalServer)
		}
	}

	return c.Status(fiber.StatusCreated).JSON(common.BaseResponse{
		Success: true,
		Code:    common.StatusCreated,
		Data:    authResponse,
	})
}

// Login godoc
// @Summary      사용자 로그인
// @Description  이메일과 비밀번호로 로그인하고 인증 토큰을 반환합니다
// @Tags         Auth
// @Accept       json
// @Produce      json
// @Param        request body LoginRequest true "로그인 정보"
// @Success      200  {object}  common.LoginResponse
// @Failure      400  {object}  common.ErrInvalidRequest
// @Failure      401  {object}  common.ErrInvalidAuth
// @Failure      500  {object}  common.ErrInternalServer
// @Router       /auth/login [post]
func (ac *AuthController) Login(c *fiber.Ctx) error {
	var input LoginRequest
	if err := c.BodyParser(&input); err != nil {
		return c.Status(fiber.StatusBadRequest).JSON(common.InvalidRequest)
	}

	if input.Email == "" || input.Password == "" {
		return c.Status(fiber.StatusBadRequest).JSON(common.InvalidRequest)
	}

	loginInput := usecase.LoginInput{
		Email:    input.Email,
		Password: input.Password,
	}

	authResponse, err := ac.authUseCase.Login(loginInput)
	if err != nil {
		return c.Status(fiber.StatusUnauthorized).JSON(common.InvalidAuth)
	}

	return c.Status(fiber.StatusOK).JSON(common.BaseResponse{
		Success: true,
		Code:    common.StatusSuccess,
		Data:    authResponse,
	})
}

================
File: interfaces/controllers/chat_controller.go
================
// interfaces/controllers/chat_controller.go
package controllers

import (
	"github.com/f1rstid/realtime-chat/application/usecase"
	"github.com/f1rstid/realtime-chat/interfaces"
	"github.com/gofiber/fiber/v2"
)

type CreatePrivateChatRequest struct {
	TargetId int `json:"targetId" example:"1"`
}

// CreateGroupChatRequest represents the request for creating a group chat
type CreateGroupChatRequest struct {
	Name    string `json:"name" example:"Team Chat" validate:"required"`
	UserIDs []int  `json:"userIds" example:"[1,2,3] validate:"required"`
}

type ChatController struct {
	chatUseCase    *usecase.ChatUsecase
	messageUseCase *usecase.MessageUsecase
}

func NewChatController(
	chatUseCase *usecase.ChatUsecase,
	messageUseCase *usecase.MessageUsecase,
) *ChatController {
	return &ChatController{
		chatUseCase:    chatUseCase,
		messageUseCase: messageUseCase,
	}
}

// CreatePrivateChat godoc
// @Summary      1:1 채팅 생성
// @Description  두 사용자 간의 1:1 채팅을 생성합니다
// @Tags         Chat
// @Accept       json
// @Produce      json
// @Param        user1_id path int true "사용자1 ID"
// @Param        user2_id path int true "사용자2 ID"
// @Success      201  {object}  common.ChatResponse
// @Failure      400  {object}  common.ErrInvalidRequest
// @Failure      500  {object}  common.ErrInternalServer
// @Router       /chats/private/{user1_id}/{user2_id} [post]
func (cc *ChatController) CreatePrivateChat(c *fiber.Ctx) error {
	var req CreatePrivateChatRequest
	if err := c.BodyParser(&req); err != nil {
		return interfaces.SendBadRequest(c, "잘못된 요청 형식입니다")
	}

	userID := c.Locals("userId").(int)

	chat, err := cc.chatUseCase.CreatePrivateChat(userID, req.TargetId)
	if err != nil {
		switch err.Error() {
		case "user1 not found", "user2 not found":
			return interfaces.SendNotFound(c, "사용자")
		default:
			return interfaces.SendInternalError(c)
		}
	}

	return interfaces.SendCreated(c, chat)
}

// CreateGroupChat godoc
// @Summary      그룹 채팅 생성
// @Description  그룹 채팅방을 생성합니다
// @Tags         Chat
// @Accept       json
// @Produce      json
// @Param        request body CreateGroupChatRequest true "채팅방 생성 정보"
// @Success      201  {object}  common.ChatResponse
// @Failure      400  {object}  common.ErrInvalidRequest
// @Failure      500  {object}  common.ErrInternalServer
// @Router       /chats/group [post]
func (cc *ChatController) CreateGroupChat(c *fiber.Ctx) error {
	var req CreateGroupChatRequest
	if err := c.BodyParser(&req); err != nil {
		return interfaces.SendBadRequest(c, "잘못된 요청 형식입니다")
	}

	if req.Name == "" {
		return interfaces.SendBadRequest(c, "채팅방 이름은 필수 항목입니다")
	}

	if len(req.UserIDs) < 2 {
		return interfaces.SendBadRequest(c, "그룹 채팅은 최소 2명 이상의 사용자가 필요합니다")
	}

	chat, err := cc.chatUseCase.CreateGroupChat(req.Name, req.UserIDs)
	if err != nil {
		switch err.Error() {
		case "user not found":
			return interfaces.SendNotFound(c, "사용자")
		default:
			return interfaces.SendInternalError(c)
		}
	}

	return interfaces.SendCreated(c, chat)
}

================
File: interfaces/controllers/message_controller.go
================
package controllers

import (
	"github.com/f1rstid/realtime-chat/application/usecase"
	"github.com/f1rstid/realtime-chat/interfaces"
	"github.com/gofiber/fiber/v2"
)

// SendMessageRequest represents the request for sending a message
type SendMessageRequest struct {
	ChatID  int    `json:"chatId" example:"1" validate:"required"`
	Content string `json:"content" example:"Hello, how are you?" validate:"required"`
}

// UpdateMessageRequest represents the request for updating a message
type UpdateMessageRequest struct {
	Content string `json:"content" example:"Updated message content" validate:"required"`
}

type MessageController struct {
	messageUseCase *usecase.MessageUsecase
}

func NewMessageController(messageUseCase *usecase.MessageUsecase) *MessageController {
	return &MessageController{
		messageUseCase: messageUseCase,
	}
}

// SendMessage godoc
// @Summary      메시지 전송
// @Description  채팅방에 새로운 메시지를 전송합니다
// @Tags         Message
// @Accept       json
// @Produce      json
// @Param        request body SendMessageRequest true "메시지 정보"
// @Success      201  {object}  common.MessageResponse
// @Failure      400  {object}  common.ErrInvalidRequest
// @Failure      500  {object}  common.ErrInternalServer
// @Security     BearerAuth
// @Router       /messages [post]
func (mc *MessageController) SendMessage(c *fiber.Ctx) error {
	var req SendMessageRequest
	if err := c.BodyParser(&req); err != nil {
		return interfaces.SendBadRequest(c, "잘못된 요청 형식입니다")
	}

	if req.Content == "" {
		return interfaces.SendBadRequest(c, "메시지 내용은 필수 항목입니다")
	}

	userID := c.Locals("userId").(int)

	message, err := mc.messageUseCase.SendMessage(req.ChatID, userID, req.Content)
	if err != nil {
		switch err.Error() {
		case "chat not found":
			return interfaces.SendNotFound(c, "채팅방")
		default:
			return interfaces.SendInternalError(c)
		}
	}

	return interfaces.SendCreated(c, message)
}

// UpdateMessage godoc
// @Summary      메시지 수정
// @Description  기존 메시지의 내용을 수정합니다
// @Tags         Message
// @Accept       json
// @Produce      json
// @Param        id   path      int  true  "메시지 ID"
// @Param        request body UpdateMessageRequest true "수정할 메시지 내용"
// @Success      200  {object}  common.MessageResponse
// @Failure      400  {object}  common.ErrInvalidRequest
// @Failure      403  {object}  common.ErrUnauthorizedMessage
// @Failure      500  {object}  common.ErrInternalServer
// @Security     BearerAuth
// @Router       /messages/{id} [put]
func (mc *MessageController) UpdateMessage(c *fiber.Ctx) error {
	messageID, err := c.ParamsInt("id")
	if err != nil {
		return interfaces.SendBadRequest(c, "잘못된 메시지 ID입니다")
	}

	var req UpdateMessageRequest
	if err := c.BodyParser(&req); err != nil {
		return interfaces.SendBadRequest(c, "잘못된 요청 형식입니다")
	}

	if req.Content == "" {
		return interfaces.SendBadRequest(c, "메시지 내용은 필수 항목입니다")
	}

	userID := c.Locals("userId").(int)

	message, err := mc.messageUseCase.UpdateMessage(messageID, userID, req.Content)
	if err != nil {
		switch err.Error() {
		case "message not found":
			return interfaces.SendNotFound(c, "메시지")
		case "unauthorized to update this message":
			return interfaces.SendForbidden(c)
		default:
			return interfaces.SendInternalError(c)
		}
	}

	return interfaces.SendSuccess(c, message)
}

// DeleteMessage godoc
// @Summary      메시지 삭제
// @Description  메시지를 삭제합니다
// @Tags         Message
// @Accept       json
// @Produce      json
// @Param        id   path      int  true  "메시지 ID"
// @Success      200  {object}  common.MessageResponse
// @Failure      400  {object}  common.ErrInvalidRequest
// @Failure      403  {object}  common.ErrUnauthorizedMessage
// @Failure      500  {object}  common.ErrInternalServer
// @Security     BearerAuth
// @Router       /messages/{id} [delete]
func (mc *MessageController) DeleteMessage(c *fiber.Ctx) error {
	messageID, err := c.ParamsInt("id")
	if err != nil {
		return interfaces.SendBadRequest(c, "잘못된 메시지 ID입니다")
	}

	userID := c.Locals("userId").(int)

	if err := mc.messageUseCase.DeleteMessage(messageID, userID); err != nil {
		switch err.Error() {
		case "message not found":
			return interfaces.SendNotFound(c, "메시지")
		case "unauthorized to delete this message":
			return interfaces.SendForbidden(c)
		default:
			return interfaces.SendInternalError(c)
		}
	}

	return interfaces.SendSuccess(c, "메시지가 삭제되었습니다")
}

================
File: interfaces/middlewares/auth_middleware.go
================
package middlewares

import (
	"strings"

	"github.com/f1rstid/realtime-chat/domain/services"
	"github.com/f1rstid/realtime-chat/interfaces"
	"github.com/gofiber/fiber/v2"
)

func AuthMiddleware(authService services.AuthService) fiber.Handler {
	return func(c *fiber.Ctx) error {
		// Get token from header
		authHeader := c.Get("authorization")

		if authHeader == "" {
			return interfaces.SendUnauthorized(c)
		}

		// Check Bearer format
		parts := strings.Split(authHeader, " ")
		if len(parts) != 2 || parts[0] != "Bearer" {
			return interfaces.SendUnauthorized(c)
		}

		// Validate token
		claims, err := authService.ValidateToken(parts[1])
		if err != nil {
			return interfaces.SendUnauthorized(c)
		}

		// Set claims in context
		c.Locals("userId", claims.UserID)
		c.Locals("userEmail", claims.Email)
		c.Locals("userNickname", claims.Nickname)

		return c.Next()
	}
}

================
File: interfaces/repositories/chat_repository.go
================
package repositories

import (
	"github.com/f1rstid/realtime-chat/domain/models"
	"github.com/f1rstid/realtime-chat/domain/repositories"
	"github.com/jmoiron/sqlx"
)

type ChatRepository struct {
	DB *sqlx.DB
}

func NewChatRepository(db *sqlx.DB) repositories.ChatRepository {
	return &ChatRepository{DB: db}
}

func (r *ChatRepository) Create(chat *models.Chat) error {
	query := `INSERT INTO chats (name) VALUES ($1) RETURNING id`
	row := r.DB.QueryRow(query, chat.Name)
	return row.Scan(&chat.ID)
}

func (r *ChatRepository) FindById(id int) (*models.Chat, error) {
	chat := models.Chat{}
	query := `SELECT * FROM chats WHERE id = $1`
	err := r.DB.Get(&chat, query, id)

	if err != nil {
		return nil, err
	}
	return &chat, nil
}

func (r *ChatRepository) Update(chat *models.Chat) error {
	query := `UPDATE chats SET name = $1 WHERE id = $2`
	_, err := r.DB.Exec(query, chat.Name, chat.ID)
	return err
}

func (r *ChatRepository) Delete(id int) error {
	query := `DELETE FROM chats WHERE id = $1`
	_, err := r.DB.Exec(query, id)
	return err
}

func (r *ChatRepository) AddUserToChat(chatID, userID int) error {
	query := `INSERT INTO chat_groups (chatId, userId) VALUES ($1, $2)`
	_, err := r.DB.Exec(query, chatID, userID)
	return err
}

func (r *ChatRepository) RemoveUserFromChat(chatID, userID int) error {
	query := `DELETE FROM chat_groups WHERE chatId = $1 AND userId = $2`
	_, err := r.DB.Exec(query, chatID, userID)
	return err
}

func (r *ChatRepository) GetChatUsers(chatID int) ([]models.User, error) {
	var users []models.User
	query := `
		SELECT u.* 
		FROM users u
		JOIN chat_groups cg ON u.id = cg.userId
		WHERE cg.chatId = $1
	`
	err := r.DB.Select(&users, query, chatID)
	return users, err
}

func (r *ChatRepository) GetUserChats(userID int) ([]models.Chat, error) {
	var chats []models.Chat
	query := `
		SELECT c.* 
		FROM chats c
		JOIN chat_groups cg ON c.id = cg.chatId
		WHERE cg.userId = $1
	`
	err := r.DB.Select(&chats, query, userID)
	return chats, err
}

================
File: interfaces/repositories/message_repository.go
================
package repositories

import (
	"github.com/f1rstid/realtime-chat/domain/models"
	"github.com/f1rstid/realtime-chat/domain/repositories"
	"github.com/jmoiron/sqlx"
)

type MessageRepository struct {
	DB *sqlx.DB
}

func NewMessageRepository(db *sqlx.DB) repositories.MessageRepository {
	return &MessageRepository{DB: db}
}

func (r *MessageRepository) Create(message *models.Message) error {
	query := `
		INSERT INTO messages (chatId, senderId, content, createdAt, updatedAt)
		VALUES ($1, $2, $3, $4, $5)
		RETURNING id
	`
	row := r.DB.QueryRow(
		query,
		message.ChatId,
		message.SenderId,
		message.Content,
		message.CreatedAt,
		message.UpdatedAt,
	)
	return row.Scan(&message.ID)
}

func (r *MessageRepository) FindById(id int) (*models.Message, error) {
	message := models.Message{}
	query := `SELECT * FROM messages WHERE id = $1`
	err := r.DB.Get(&message, query, id)
	if err != nil {
		return nil, err
	}
	return &message, nil
}

func (r *MessageRepository) Update(message *models.Message) error {
	query := `
		UPDATE messages 
		SET content = $1, updatedAt = $2
		WHERE id = $3
	`
	_, err := r.DB.Exec(query, message.Content, message.UpdatedAt, message.ID)
	return err
}

func (r *MessageRepository) Delete(id int) error {
	query := `DELETE FROM messages WHERE id = $1`
	_, err := r.DB.Exec(query, id)
	return err
}

================
File: interfaces/repositories/user_repository.go
================
package repositories

import (
	"github.com/f1rstid/realtime-chat/domain/models"
	"github.com/f1rstid/realtime-chat/domain/repositories"
	"github.com/jmoiron/sqlx"
)

type UserRepository struct {
	DB *sqlx.DB
}

func NewUserRepository(db *sqlx.DB) repositories.UserRepository {
	return &UserRepository{DB: db}
}

func (r *UserRepository) Create(user *models.User) (*models.User, error) {
	query := `INSERT INTO users (email, nickname, password) VALUES ($1, $2, $3) RETURNING id`
	row := r.DB.QueryRow(query, user.Email, user.Nickname, user.Password)
	err := row.Scan(&user.ID)
	if err != nil {
		return nil, err
	}
	return user, nil
}

func (r *UserRepository) FindByID(id int) (*models.User, error) {
	user := models.User{}
	query := `SELECT * FROM users WHERE id = $1`
	err := r.DB.Get(&user, query, id)
	if err != nil {
		return nil, err
	}
	return &user, nil
}

func (r *UserRepository) FindByEmail(email string) (*models.User, error) {
	user := models.User{}
	query := `SELECT * FROM users WHERE email = $1`
	err := r.DB.Get(&user, query, email)
	if err != nil {
		return nil, err
	}
	return &user, nil
}

func (r *UserRepository) FindByNickname(nickname string) (*models.User, error) {
	user := models.User{}
	query := `SELECT * FROM users WHERE nickname = $1`
	err := r.DB.Get(&user, query, nickname)
	if err != nil {
		return nil, err
	}
	return &user, nil
}

func (r *UserRepository) Update(user *models.User) error {
	query := `UPDATE users SET email = $1, nickname = $2, password = $3 WHERE id = $4`
	_, err := r.DB.Exec(query, user.Email, user.Nickname, user.Password, user.ID)
	return err
}

// Add the missing Delete method
func (r *UserRepository) Delete(id int) error {
	query := `DELETE FROM users WHERE id = $1`
	_, err := r.DB.Exec(query, id)
	return err
}

================
File: interfaces/routers/router.go
================
package routers

import (
	"github.com/f1rstid/realtime-chat/application/usecase"
	"github.com/f1rstid/realtime-chat/config"
	"github.com/f1rstid/realtime-chat/domain/services"
	"github.com/f1rstid/realtime-chat/infrastructure/sqlite"
	"github.com/f1rstid/realtime-chat/interfaces/controllers"
	"github.com/f1rstid/realtime-chat/interfaces/middlewares"
	"github.com/f1rstid/realtime-chat/interfaces/repositories"
	"github.com/gofiber/fiber/v2"
	"github.com/gofiber/swagger"
)

func SetRoutes(app *fiber.App, config *config.Config) {
	// Swagger
	app.Get("/swagger/*", swagger.HandlerDefault)

	// Initialize repositories
	userRepo := repositories.NewUserRepository(sqlite.DB)
	chatRepo := repositories.NewChatRepository(sqlite.DB)
	messageRepo := repositories.NewMessageRepository(sqlite.DB)

	// Initialize services
	authService := services.NewAuthService(config.JWTSecret)

	// Initialize usecases
	authUseCase := usecase.NewAuthUsecase(userRepo, authService)
	chatUseCase := usecase.NewChatUsecase(chatRepo, messageRepo, userRepo)
	messageUseCase := usecase.NewMessageUsecase(messageRepo, chatRepo)

	// Initialize controllers
	authController := controllers.NewAuthController(authUseCase)
	chatController := controllers.NewChatController(chatUseCase, messageUseCase)
	messageController := controllers.NewMessageController(messageUseCase)

	// Auth routes
	auth := app.Group("/api/auth")
	auth.Post("/register", authController.Register)
	auth.Post("/login", authController.Login)

	// Protected routes
	api := app.Group("/api", middlewares.AuthMiddleware(authService))

	// Chat routes
	chats := api.Group("/chats")
	chats.Post("/private", chatController.CreatePrivateChat)
	chats.Post("/group", chatController.CreateGroupChat)

	// Message routes
	messages := api.Group("/messages")
	messages.Post("/", messageController.SendMessage)
	messages.Put("/:id", messageController.UpdateMessage)
	messages.Delete("/:id", messageController.DeleteMessage)
}

================
File: interfaces/errors.go
================
package interfaces

// Error codes
const (
	// Success codes (2xxx)
	SuccessCode = 2000
	CreatedCode = 2001

	// Client error codes (4xxx)
	InvalidRequestError     = 4000
	UnauthorizedError       = 4001
	ForbiddenError          = 4002
	NotFoundError           = 4003
	EmailExistsError        = 4004
	NicknameExistsError     = 4005
	InvalidCredentialsError = 4006
	ValidationError         = 4007
	InvalidTokenError       = 4008

	// Server error codes (5xxx)
	InternalServerError = 5000
	DatabaseError       = 5001
)

type AppError struct {
	Code    int    `json:"code"`
	Message string `json:"message"`
	Status  int    `json:"status"`
}

var errorMap = map[int]AppError{
	// Success
	SuccessCode: {
		Code:    SuccessCode,
		Message: "Success",
		Status:  200,
	},
	CreatedCode: {
		Code:    CreatedCode,
		Message: "Created successfully",
		Status:  201,
	},

	// Client errors
	InvalidRequestError: {
		Code:    InvalidRequestError,
		Message: "Invalid request",
		Status:  400,
	},
	UnauthorizedError: {
		Code:    UnauthorizedError,
		Message: "Unauthorized",
		Status:  401,
	},
	ForbiddenError: {
		Code:    ForbiddenError,
		Message: "Forbidden",
		Status:  403,
	},
	NotFoundError: {
		Code:    NotFoundError,
		Message: "Resource not found",
		Status:  404,
	},
	EmailExistsError: {
		Code:    EmailExistsError,
		Message: "Email already exists",
		Status:  400,
	},
	NicknameExistsError: {
		Code:    NicknameExistsError,
		Message: "Nickname already exists",
		Status:  400,
	},
	InvalidCredentialsError: {
		Code:    InvalidCredentialsError,
		Message: "Invalid email or password",
		Status:  401,
	},
	ValidationError: {
		Code:    ValidationError,
		Message: "Validation failed",
		Status:  400,
	},
	InvalidTokenError: {
		Code:    InvalidTokenError,
		Message: "Invalid or expired token",
		Status:  401,
	},

	// Server errors
	InternalServerError: {
		Code:    InternalServerError,
		Message: "Internal server error",
		Status:  500,
	},
	DatabaseError: {
		Code:    DatabaseError,
		Message: "Database error",
		Status:  500,
	},
}

================
File: interfaces/response.go
================
// interfaces/response.go
package interfaces

import (
	"github.com/gofiber/fiber/v2"
)

// Response 구조체는 공통 응답 구조를 사용합니다.
type Response struct {
	Success bool        `json:"success" example:"true"`
	Code    int         `json:"code" example:"2000"`
	Data    interface{} `json:"data"`
}

// Data models are moved to the common package, so you can remove redundant definitions here.

const (
	// Success codes (2xxx)
	StatusSuccess = 2000
	StatusCreated = 2001

	// Client error codes (4xxx)
	StatusBadRequest         = 4000
	StatusUnauthorized       = 4001
	StatusForbidden          = 4002
	StatusNotFound           = 4003
	StatusEmailExists        = 4004
	StatusNicknameExists     = 4005
	StatusInvalidCredentials = 4006
	StatusValidationError    = 4007
	StatusInvalidToken       = 4008

	// Server error codes (5xxx)
	StatusInternalError = 5000
	StatusDBError       = 5001
)

// Response helpers
func SendResponse(c *fiber.Ctx, httpStatus, code int, success bool, data interface{}) error {
	return c.Status(httpStatus).JSON(Response{
		Code:    code,
		Success: success,
		Data:    data,
	})
}

func SendSuccess(c *fiber.Ctx, data interface{}) error {
	return SendResponse(c, fiber.StatusOK, StatusSuccess, true, data)
}

func SendCreated(c *fiber.Ctx, data interface{}) error {
	return SendResponse(c, fiber.StatusCreated, StatusCreated, true, data)
}

func SendError(c *fiber.Ctx, httpStatus, code int, message string) error {
	return SendResponse(c, httpStatus, code, false, message)
}

// Error helpers
func SendBadRequest(c *fiber.Ctx, message string) error {
	return SendError(c, fiber.StatusBadRequest, StatusBadRequest, message)
}

func SendUnauthorized(c *fiber.Ctx) error {
	return SendError(c, fiber.StatusUnauthorized, StatusUnauthorized, "인증되지 않은 접근입니다")
}

func SendForbidden(c *fiber.Ctx) error {
	return SendError(c, fiber.StatusForbidden, StatusForbidden, "접근 권한이 없습니다")
}

func SendNotFound(c *fiber.Ctx, resource string) error {
	return SendError(c, fiber.StatusNotFound, StatusNotFound, resource+"를 찾을 수 없습니다")
}

func SendEmailExists(c *fiber.Ctx) error {
	return SendError(c, fiber.StatusConflict, StatusEmailExists, "이미 사용중인 이메일입니다")
}

func SendInternalError(c *fiber.Ctx) error {
	return SendError(c, fiber.StatusInternalServerError, StatusInternalError, "내부 서버 오류가 발생했습니다")
}

================
File: .gitignore
================
# If you prefer the allow list template instead of the deny list, see community template:
# https://github.com/github/gitignore/blob/main/community/Golang/Go.AllowList.gitignore
#
# Binaries for programs and plugins
*.exe
*.exe~
*.dll
*.so
*.dylib

# Test binary, built with `go test -c`
*.test

# Output of the go coverage tool, specifically when used with LiteIDE
*.out

# Dependency directories (remove the comment below to include it)
# vendor/

# Go workspace file
go.work
go.work.sum

# env file
.env

================
File: go.mod
================
module github.com/f1rstid/realtime-chat

go 1.23.2

require (
	github.com/gofiber/fiber/v2 v2.52.5
	github.com/gofiber/websocket/v2 v2.2.1
	github.com/golang-jwt/jwt/v4 v4.5.1
	github.com/jmoiron/sqlx v1.4.0
	github.com/joho/godotenv v1.5.1
	github.com/mattn/go-sqlite3 v1.14.24
	golang.org/x/crypto v0.29.0
)

require (
	github.com/KyleBanks/depth v1.2.1 // indirect
	github.com/PuerkitoBio/purell v1.2.1 // indirect
	github.com/PuerkitoBio/urlesc v0.0.0-20170810143723-de5bf2ad4578 // indirect
	github.com/andybalholm/brotli v1.1.1 // indirect
	github.com/cpuguy83/go-md2man/v2 v2.0.5 // indirect
	github.com/fasthttp/websocket v1.5.3 // indirect
	github.com/go-openapi/jsonpointer v0.21.0 // indirect
	github.com/go-openapi/jsonreference v0.21.0 // indirect
	github.com/go-openapi/spec v0.21.0 // indirect
	github.com/go-openapi/swag v0.23.0 // indirect
	github.com/gofiber/swagger v1.1.0 // indirect
	github.com/gofiber/template v1.8.3 // indirect
	github.com/gofiber/template/html/v2 v2.1.2 // indirect
	github.com/gofiber/utils v1.1.0 // indirect
	github.com/google/uuid v1.6.0 // indirect
	github.com/josharian/intern v1.0.0 // indirect
	github.com/klauspost/compress v1.17.11 // indirect
	github.com/mailru/easyjson v0.7.7 // indirect
	github.com/mattn/go-colorable v0.1.13 // indirect
	github.com/mattn/go-isatty v0.0.20 // indirect
	github.com/mattn/go-runewidth v0.0.16 // indirect
	github.com/rivo/uniseg v0.4.7 // indirect
	github.com/russross/blackfriday/v2 v2.1.0 // indirect
	github.com/savsgio/gotils v0.0.0-20230208104028-c358bd845dee // indirect
	github.com/shurcooL/sanitized_anchor_name v1.0.0 // indirect
	github.com/swaggo/files/v2 v2.0.1 // indirect
	github.com/swaggo/swag v1.16.4 // indirect
	github.com/urfave/cli/v2 v2.27.5 // indirect
	github.com/valyala/bytebufferpool v1.0.0 // indirect
	github.com/valyala/fasthttp v1.57.0 // indirect
	github.com/valyala/tcplisten v1.0.0 // indirect
	github.com/xrash/smetrics v0.0.0-20240521201337-686a1a2994c1 // indirect
	golang.org/x/net v0.31.0 // indirect
	golang.org/x/sys v0.27.0 // indirect
	golang.org/x/text v0.20.0 // indirect
	golang.org/x/tools v0.27.0 // indirect
	gopkg.in/yaml.v2 v2.4.0 // indirect
	gopkg.in/yaml.v3 v3.0.1 // indirect
	sigs.k8s.io/yaml v1.4.0 // indirect
)

================
File: go.sum
================
filippo.io/edwards25519 v1.1.0 h1:FNf4tywRC1HmFuKW5xopWpigGjJKiJSV0Cqo0cJWDaA=
filippo.io/edwards25519 v1.1.0/go.mod h1:BxyFTGdWcka3PhytdK4V28tE5sGfRvvvRV7EaN4VDT4=
github.com/KyleBanks/depth v1.2.1 h1:5h8fQADFrWtarTdtDudMmGsC7GPbOAu6RVB3ffsVFHc=
github.com/KyleBanks/depth v1.2.1/go.mod h1:jzSb9d0L43HxTQfT+oSA1EEp2q+ne2uh6XgeJcm8brE=
github.com/PuerkitoBio/purell v1.2.1 h1:QsZ4TjvwiMpat6gBCBxEQI0rcS9ehtkKtSpiUnd9N28=
github.com/PuerkitoBio/purell v1.2.1/go.mod h1:ZwHcC/82TOaovDi//J/804umJFFmbOHPngi8iYYv/Eo=
github.com/PuerkitoBio/urlesc v0.0.0-20170810143723-de5bf2ad4578 h1:d+Bc7a5rLufV/sSk/8dngufqelfh6jnri85riMAaF/M=
github.com/PuerkitoBio/urlesc v0.0.0-20170810143723-de5bf2ad4578/go.mod h1:uGdkoq3SwY9Y+13GIhn11/XLaGBb4BfwItxLd5jeuXE=
github.com/andybalholm/brotli v1.0.5 h1:8uQZIdzKmjc/iuPu7O2ioW48L81FgatrcpfFmiq/cCs=
github.com/andybalholm/brotli v1.0.5/go.mod h1:fO7iG3H7G2nSZ7m0zPUDn85XEX2GTukHGRSepvi9Eig=
github.com/andybalholm/brotli v1.1.1 h1:PR2pgnyFznKEugtsUo0xLdDop5SKXd5Qf5ysW+7XdTA=
github.com/andybalholm/brotli v1.1.1/go.mod h1:05ib4cKhjx3OQYUY22hTVd34Bc8upXjOLL2rKwwZBoA=
github.com/cpuguy83/go-md2man/v2 v2.0.5 h1:ZtcqGrnekaHpVLArFSe4HK5DoKx1T0rq2DwVB0alcyc=
github.com/cpuguy83/go-md2man/v2 v2.0.5/go.mod h1:tgQtvFlXSQOSOSIRvRPT7W67SCa46tRHOmNcaadrF8o=
github.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=
github.com/fasthttp/websocket v1.5.3 h1:TPpQuLwJYfd4LJPXvHDYPMFWbLjsT91n3GpWtCQtdek=
github.com/fasthttp/websocket v1.5.3/go.mod h1:46gg/UBmTU1kUaTcwQXpUxtRwG2PvIZYeA8oL6vF3Fs=
github.com/go-openapi/jsonpointer v0.21.0 h1:YgdVicSA9vH5RiHs9TZW5oyafXZFc6+2Vc1rr/O9oNQ=
github.com/go-openapi/jsonpointer v0.21.0/go.mod h1:IUyH9l/+uyhIYQ/PXVA41Rexl+kOkAPDdXEYns6fzUY=
github.com/go-openapi/jsonreference v0.21.0 h1:Rs+Y7hSXT83Jacb7kFyjn4ijOuVGSvOdF2+tg1TRrwQ=
github.com/go-openapi/jsonreference v0.21.0/go.mod h1:LmZmgsrTkVg9LG4EaHeY8cBDslNPMo06cago5JNLkm4=
github.com/go-openapi/spec v0.21.0 h1:LTVzPc3p/RzRnkQqLRndbAzjY0d0BCL72A6j3CdL9ZY=
github.com/go-openapi/spec v0.21.0/go.mod h1:78u6VdPw81XU44qEWGhtr982gJ5BWg2c0I5XwVMotYk=
github.com/go-openapi/swag v0.23.0 h1:vsEVJDUo2hPJ2tu0/Xc+4noaxyEffXNIs3cOULZ+GrE=
github.com/go-openapi/swag v0.23.0/go.mod h1:esZ8ITTYEsH1V2trKHjAN8Ai7xHb8RV+YSZ577vPjgQ=
github.com/go-sql-driver/mysql v1.8.1 h1:LedoTUt/eveggdHS9qUFC1EFSa8bU2+1pZjSRpvNJ1Y=
github.com/go-sql-driver/mysql v1.8.1/go.mod h1:wEBSXgmK//2ZFJyE+qWnIsVGmvmEKlqwuVSjsCm7DZg=
github.com/gofiber/fiber/v2 v2.52.5 h1:tWoP1MJQjGEe4GB5TUGOi7P2E0ZMMRx5ZTG4rT+yGMo=
github.com/gofiber/fiber/v2 v2.52.5/go.mod h1:KEOE+cXMhXG0zHc9d8+E38hoX+ZN7bhOtgeF2oT6jrQ=
github.com/gofiber/swagger v1.1.0 h1:ff3rg1fB+Rp5JN/N8jfxTiZtMKe/9tB9QDc79fPiJKQ=
github.com/gofiber/swagger v1.1.0/go.mod h1:pRZL0Np35sd+lTODTE5The0G+TMHfNY+oC4hM2/i5m8=
github.com/gofiber/template v1.8.3 h1:hzHdvMwMo/T2kouz2pPCA0zGiLCeMnoGsQZBTSYgZxc=
github.com/gofiber/template v1.8.3/go.mod h1:bs/2n0pSNPOkRa5VJ8zTIvedcI/lEYxzV3+YPXdBvq8=
github.com/gofiber/template/html/v2 v2.1.2 h1:wkK/mYJ3nIhongTkG3t0QgV4ADdgOYJYVSAF2AHnh8Y=
github.com/gofiber/template/html/v2 v2.1.2/go.mod h1:E98Z/FzvpaSib06aWEgYk6GXNf3ctoyaJH8yW5ay5ak=
github.com/gofiber/utils v1.1.0 h1:vdEBpn7AzIUJRhe+CiTOJdUcTg4Q9RK+pEa0KPbLdrM=
github.com/gofiber/utils v1.1.0/go.mod h1:poZpsnhBykfnY1Mc0KeEa6mSHrS3dV0+oBWyeQmb2e0=
github.com/gofiber/websocket/v2 v2.2.1 h1:C9cjxvloojayOp9AovmpQrk8VqvVnT8Oao3+IUygH7w=
github.com/gofiber/websocket/v2 v2.2.1/go.mod h1:Ao/+nyNnX5u/hIFPuHl28a+NIkrqK7PRimyKaj4JxVU=
github.com/golang-jwt/jwt/v4 v4.5.1 h1:JdqV9zKUdtaa9gdPlywC3aeoEsR681PlKC+4F5gQgeo=
github.com/golang-jwt/jwt/v4 v4.5.1/go.mod h1:m21LjoU+eqJr34lmDMbreY2eSTRJ1cv77w39/MY0Ch0=
github.com/google/go-cmp v0.5.9/go.mod h1:17dUlkBOakJ0+DkrSSNjCkIjxS6bF9zb3elmeNGIjoY=
github.com/google/uuid v1.5.0 h1:1p67kYwdtXjb0gL0BPiP1Av9wiZPo5A8z2cWkTZ+eyU=
github.com/google/uuid v1.5.0/go.mod h1:TIyPZe4MgqvfeYDBFedMoGGpEw/LqOeaOT+nhxU+yHo=
github.com/google/uuid v1.6.0 h1:NIvaJDMOsjHA8n1jAhLSgzrAzy1Hgr+hNrb57e+94F0=
github.com/google/uuid v1.6.0/go.mod h1:TIyPZe4MgqvfeYDBFedMoGGpEw/LqOeaOT+nhxU+yHo=
github.com/jmoiron/sqlx v1.4.0 h1:1PLqN7S1UYp5t4SrVVnt4nUVNemrDAtxlulVe+Qgm3o=
github.com/jmoiron/sqlx v1.4.0/go.mod h1:ZrZ7UsYB/weZdl2Bxg6jCRO9c3YHl8r3ahlKmRT4JLY=
github.com/joho/godotenv v1.5.1 h1:7eLL/+HRGLY0ldzfGMeQkb7vMd0as4CfYvUVzLqw0N0=
github.com/joho/godotenv v1.5.1/go.mod h1:f4LDr5Voq0i2e/R5DDNOoa2zzDfwtkZa6DnEwAbqwq4=
github.com/josharian/intern v1.0.0 h1:vlS4z54oSdjm0bgjRigI+G1HpF+tI+9rE5LLzOg8HmY=
github.com/josharian/intern v1.0.0/go.mod h1:5DoeVV0s6jJacbCEi61lwdGj/aVlrQvzHFFd8Hwg//Y=
github.com/klauspost/compress v1.17.0 h1:Rnbp4K9EjcDuVuHtd0dgA4qNuv9yKDYKK1ulpJwgrqM=
github.com/klauspost/compress v1.17.0/go.mod h1:ntbaceVETuRiXiv4DpjP66DpAtAGkEQskQzEyD//IeE=
github.com/klauspost/compress v1.17.11 h1:In6xLpyWOi1+C7tXUUWv2ot1QvBjxevKAaI6IXrJmUc=
github.com/klauspost/compress v1.17.11/go.mod h1:pMDklpSncoRMuLFrf1W9Ss9KT+0rH90U12bZKk7uwG0=
github.com/kr/text v0.2.0/go.mod h1:eLer722TekiGuMkidMxC/pM04lWEeraHUUmBw8l2grE=
github.com/lib/pq v1.10.9 h1:YXG7RB+JIjhP29X+OtkiDnYaXQwpS4JEWq7dtCCRUEw=
github.com/lib/pq v1.10.9/go.mod h1:AlVN5x4E4T544tWzH6hKfbfQvm3HdbOxrmggDNAPY9o=
github.com/mailru/easyjson v0.7.7 h1:UGYAvKxe3sBsEDzO8ZeWOSlIQfWFlxbzLZe7hwFURr0=
github.com/mailru/easyjson v0.7.7/go.mod h1:xzfreul335JAWq5oZzymOObrkdz5UnU4kGfJJLY9Nlc=
github.com/mattn/go-colorable v0.1.13 h1:fFA4WZxdEF4tXPZVKMLwD8oUnCTTo08duU7wxecdEvA=
github.com/mattn/go-colorable v0.1.13/go.mod h1:7S9/ev0klgBDR4GtXTXX8a3vIGJpMovkB8vQcUbaXHg=
github.com/mattn/go-isatty v0.0.16/go.mod h1:kYGgaQfpe5nmfYZH+SKPsOc2e4SrIfOl2e/yFXSvRLM=
github.com/mattn/go-isatty v0.0.20 h1:xfD0iDuEKnDkl03q4limB+vH+GxLEtL/jb4xVJSWWEY=
github.com/mattn/go-isatty v0.0.20/go.mod h1:W+V8PltTTMOvKvAeJH7IuucS94S2C6jfK/D7dTCTo3Y=
github.com/mattn/go-runewidth v0.0.15 h1:UNAjwbU9l54TA3KzvqLGxwWjHmMgBUVhBiTjelZgg3U=
github.com/mattn/go-runewidth v0.0.15/go.mod h1:Jdepj2loyihRzMpdS35Xk/zdY8IAYHsh153qUoGf23w=
github.com/mattn/go-runewidth v0.0.16 h1:E5ScNMtiwvlvB5paMFdw9p4kSQzbXFikJ5SQO6TULQc=
github.com/mattn/go-runewidth v0.0.16/go.mod h1:Jdepj2loyihRzMpdS35Xk/zdY8IAYHsh153qUoGf23w=
github.com/mattn/go-sqlite3 v1.14.22/go.mod h1:Uh1q+B4BYcTPb+yiD3kU8Ct7aC0hY9fxUwlHK0RXw+Y=
github.com/mattn/go-sqlite3 v1.14.24 h1:tpSp2G2KyMnnQu99ngJ47EIkWVmliIizyZBfPrBWDRM=
github.com/mattn/go-sqlite3 v1.14.24/go.mod h1:Uh1q+B4BYcTPb+yiD3kU8Ct7aC0hY9fxUwlHK0RXw+Y=
github.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=
github.com/rivo/uniseg v0.2.0 h1:S1pD9weZBuJdFmowNwbpi7BJ8TNftyUImj/0WQi72jY=
github.com/rivo/uniseg v0.2.0/go.mod h1:J6wj4VEh+S6ZtnVlnTBMWIodfgj8LQOQFoIToxlJtxc=
github.com/rivo/uniseg v0.4.7 h1:WUdvkW8uEhrYfLC4ZzdpI2ztxP1I582+49Oc5Mq64VQ=
github.com/rivo/uniseg v0.4.7/go.mod h1:FN3SvrM+Zdj16jyLfmOkMNblXMcoc8DfTHruCPUcx88=
github.com/russross/blackfriday/v2 v2.1.0 h1:JIOH55/0cWyOuilr9/qlrm0BSXldqnqwMsf35Ld67mk=
github.com/russross/blackfriday/v2 v2.1.0/go.mod h1:+Rmxgy9KzJVeS9/2gXHxylqXiyQDYRxCVz55jmeOWTM=
github.com/savsgio/gotils v0.0.0-20230208104028-c358bd845dee h1:8Iv5m6xEo1NR1AvpV+7XmhI4r39LGNzwUL4YpMuL5vk=
github.com/savsgio/gotils v0.0.0-20230208104028-c358bd845dee/go.mod h1:qwtSXrKuJh/zsFQ12yEE89xfCrGKK63Rr7ctU/uCo4g=
github.com/shurcooL/sanitized_anchor_name v1.0.0 h1:PdmoCO6wvbs+7yrJyMORt4/BmY5IYyJwS/kOiWx8mHo=
github.com/shurcooL/sanitized_anchor_name v1.0.0/go.mod h1:1NzhyTcUVG4SuEtjjoZeVRXNmyL/1OwPU0+IJeTBvfc=
github.com/swaggo/files/v2 v2.0.1 h1:XCVJO/i/VosCDsJu1YLpdejGsGnBE9deRMpjN4pJLHk=
github.com/swaggo/files/v2 v2.0.1/go.mod h1:24kk2Y9NYEJ5lHuCra6iVwkMjIekMCaFq/0JQj66kyM=
github.com/swaggo/swag v1.16.4 h1:clWJtd9LStiG3VeijiCfOVODP6VpHtKdQy9ELFG3s1A=
github.com/swaggo/swag v1.16.4/go.mod h1:VBsHJRsDvfYvqoiMKnsdwhNV9LEMHgEDZcyVYX0sxPg=
github.com/urfave/cli/v2 v2.27.5 h1:WoHEJLdsXr6dDWoJgMq/CboDmyY/8HMMH1fTECbih+w=
github.com/urfave/cli/v2 v2.27.5/go.mod h1:3Sevf16NykTbInEnD0yKkjDAeZDS0A6bzhBH5hrMvTQ=
github.com/valyala/bytebufferpool v1.0.0 h1:GqA5TC/0021Y/b9FG4Oi9Mr3q7XYx6KllzawFIhcdPw=
github.com/valyala/bytebufferpool v1.0.0/go.mod h1:6bBcMArwyJ5K/AmCkWv1jt77kVWyCJ6HpOuEn7z0Csc=
github.com/valyala/fasthttp v1.51.0 h1:8b30A5JlZ6C7AS81RsWjYMQmrZG6feChmgAolCl1SqA=
github.com/valyala/fasthttp v1.51.0/go.mod h1:oI2XroL+lI7vdXyYoQk03bXBThfFl2cVdIA3Xl7cH8g=
github.com/valyala/fasthttp v1.57.0 h1:Xw8SjWGEP/+wAAgyy5XTvgrWlOD1+TxbbvNADYCm1Tg=
github.com/valyala/fasthttp v1.57.0/go.mod h1:h6ZBaPRlzpZ6O3H5t2gEk1Qi33+TmLvfwgLLp0t9CpE=
github.com/valyala/tcplisten v1.0.0 h1:rBHj/Xf+E1tRGZyWIWwJDiRY0zc1Js+CV5DqwacVSA8=
github.com/valyala/tcplisten v1.0.0/go.mod h1:T0xQ8SeCZGxckz9qRXTfG43PvQ/mcWh7FwZEA7Ioqkc=
github.com/xrash/smetrics v0.0.0-20240521201337-686a1a2994c1 h1:gEOO8jv9F4OT7lGCjxCBTO/36wtF6j2nSip77qHd4x4=
github.com/xrash/smetrics v0.0.0-20240521201337-686a1a2994c1/go.mod h1:Ohn+xnUBiLI6FVj/9LpzZWtj1/D6lUovWYBkxHVV3aM=
github.com/xyproto/randomstring v1.0.5/go.mod h1:rgmS5DeNXLivK7YprL0pY+lTuhNQW3iGxZ18UQApw/E=
golang.org/x/crypto v0.29.0 h1:L5SG1JTTXupVV3n6sUqMTeWbjAyfPwoda2DLX8J8FrQ=
golang.org/x/crypto v0.29.0/go.mod h1:+F4F4N5hv6v38hfeYwTdx20oUvLLc+QfrE9Ax9HtgRg=
golang.org/x/net v0.31.0 h1:68CPQngjLL0r2AlUKiSxtQFKvzRVbnzLwMUn5SzcLHo=
golang.org/x/net v0.31.0/go.mod h1:P4fl1q7dY2hnZFxEk4pPSkDHF+QqjitcnDjUQyMM+pM=
golang.org/x/sys v0.0.0-20220811171246-fbc7d0a398ab/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
golang.org/x/sys v0.6.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
golang.org/x/sys v0.27.0 h1:wBqf8DvsY9Y/2P8gAfPDEYNuS30J4lPHJxXSb/nJZ+s=
golang.org/x/sys v0.27.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=
golang.org/x/text v0.20.0 h1:gK/Kv2otX8gz+wn7Rmb3vT96ZwuoxnQlY+HlJVj7Qug=
golang.org/x/text v0.20.0/go.mod h1:D4IsuqiFMhST5bX19pQ9ikHC2GsaKyk/oF+pn3ducp4=
golang.org/x/tools v0.27.0 h1:qEKojBykQkQ4EynWy4S8Weg69NumxKdn40Fce3uc/8o=
golang.org/x/tools v0.27.0/go.mod h1:sUi0ZgbwW9ZPAq26Ekut+weQPR5eIM6GQLQ1Yjm1H0Q=
gopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=
gopkg.in/yaml.v2 v2.4.0 h1:D8xgwECY7CYvx+Y2n4sBz93Jn9JRvxdiyyo8CTfuKaY=
gopkg.in/yaml.v2 v2.4.0/go.mod h1:RDklbk79AGWmwhnvt/jBztapEOGDOx6ZbXqjP6csGnQ=
gopkg.in/yaml.v3 v3.0.1 h1:fxVm/GzAzEWqLHuvctI91KS9hhNmmWOoWu0XTYJS7CA=
gopkg.in/yaml.v3 v3.0.1/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=
sigs.k8s.io/yaml v1.4.0 h1:Mk1wCc2gy/F0THH0TAp1QYyJNzRm2KCLy3o5ASXVI5E=
sigs.k8s.io/yaml v1.4.0/go.mod h1:Ejl7/uTz7PSA4eKMyQCUTnhZYNmLIl+5c2lQPGR2BPY=

================
File: main.go
================
package main

import (
	"log"
	"os"
	"os/signal"
	"syscall"

	"github.com/f1rstid/realtime-chat/config"
	_ "github.com/f1rstid/realtime-chat/docs" // swagger docs
	"github.com/f1rstid/realtime-chat/infrastructure/sqlite"
	"github.com/f1rstid/realtime-chat/interfaces/routers"

	"github.com/gofiber/fiber/v2"
	"github.com/gofiber/fiber/v2/middleware/cors"
	"github.com/gofiber/swagger"
)

// @title           Realtime Chat API
// @version         1.0
// @description     실시간 채팅을 위한 RESTful API 서버입니다.
// @termsOfService  http://swagger.io/terms/

// @contact.name   API Support
// @contact.url    http://www.swagger.io/support
// @contact.email  support@swagger.io

// @license.name  Apache 2.0
// @license.url   http://www.apache.org/licenses/LICENSE-2.0.html

// @host      localhost:5050
// @BasePath  /api

// @securityDefinitions.apikey BearerAuth
// @in header
// @name Authorization
// @description JWT 토큰을 입력하세요. 예: Bearer {token}
func main() {
	config, err := config.LoadConfig()
	if err != nil {
		log.Fatalf("failed to load config: %v", err)
	}

	if err := sqlite.InitDB(config.Database.DSN); err != nil {
		log.Fatalf("failed to initialize database: %v", err)
	}
	sqlite.Migrate()
	defer sqlite.CloseDB()

	app := fiber.New(fiber.Config{})

	app.Use(cors.New(cors.Config{
		AllowOrigins: "*",
		AllowHeaders: "Origin, Content-Type, Accept, Authorization",
		AllowMethods: "GET, POST, PUT, DELETE",
	}))

	// Swagger setup
	app.Get("/swagger/*", swagger.HandlerDefault)

	routers.SetRoutes(app, config)

	go func() {
		log.Printf("Server is running on %s", config.ServerPort)
		log.Printf("Swagger documentation is available at http://localhost:%s/swagger/", config.ServerPort)
		if err := app.Listen(":" + config.ServerPort); err != nil {
			log.Fatalf("failed to start server: %v", err)
		}
	}()

	quit := make(chan os.Signal, 1)
	signal.Notify(quit, syscall.SIGINT, syscall.SIGTERM)
	<-quit

	log.Println("Shutting down server...")

	if err := app.Shutdown(); err != nil {
		log.Fatalf("failed to shutdown server: %v", err)
	}
}

================
File: README.md
================
# realtime-chat
